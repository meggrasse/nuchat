"use strict";

var _createClass = (function () { function defineProperties(target, props) { for (var key in props) { var prop = props[key]; prop.configurable = true; if (prop.value) prop.writable = true; } Object.defineProperties(target, props); } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _classCallCheck = function (instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } };

/**
 * @class layer.Logger
 * @private
 *
 */

var _require$LOG = require("./const").LOG;

var DEBUG = _require$LOG.DEBUG;
var INFO = _require$LOG.INFO;
var WARN = _require$LOG.WARN;
var ERROR = _require$LOG.ERROR;

var _require = require("./client-utils");

var isEmpty = _require.isEmpty;

var LayerCss = "color: #888; font-weight: bold;";
var Black = "color: black";

var Logger = (function () {
  function Logger() {
    _classCallCheck(this, Logger);
  }

  _createClass(Logger, {
    log: {
      value: function log(msg, obj, type, color) {
        if (typeof msg === "string") {
          var timestamp = new Date().toLocaleTimeString();
          console.log("%cLayer%c " + type + "%c [" + timestamp + "]: " + msg, LayerCss, "color: " + color, Black);
        } else {
          this._logObj(msg, type, color);
        }
        if (obj) this._logObj(obj, type, color);
      }
    },
    _logObj: {
      value: function _logObj(obj, type, color) {
        if (!obj || isEmpty(obj)) {
          return;
        }if (obj.constructor.name === "Object") {
          console.log("%cLayer%c " + type + "%c: " + JSON.stringify(obj, null, 4), LayerCss, "color: " + color, Black);
        } else {
          console.log("%cLayer%c " + type + "%c: %O", LayerCss, "color: " + color, Black, obj);
        }
      }
    },
    debug: {
      value: function debug(msg, obj) {
        if (this.level >= DEBUG) this.log(msg, obj, "DEBUG", "#888");
      }
    },
    info: {
      value: function info(msg, obj) {
        if (this.level >= INFO) this.log(msg, obj, "INFO", "black");
      }
    },
    warn: {
      value: function warn(msg, obj) {
        if (this.level >= WARN) this.log(msg, obj, "WARN", "orange");
      }
    },
    error: {
      value: function error(msg, obj) {
        if (this.level >= ERROR) this.log(msg, obj, "ERROR", "red");
      }
    }
  });

  return Logger;
})();

Logger.prototype.level = ERROR;

var logger = new Logger();

module.exports = logger;